-----------------------------------------------------------
--------- AUTOGENERATED FILE, DO NOT EDIT -----------------
-----------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.desilog.all;


entity Example0 is port(
	clk_clk, clk_reset_n: in std_ulogic;
	doAdd:	in std_ulogic; -- reg
	xx:	in u8; -- reg
	yy:	in u8; -- reg
	zz:	out u8; -- reg
	and_result_reg:	out u8; -- reg
	xor_result_wire:	out u8; -- WIRE
	or_result_latch:	out u8 -- Latch
	);
end entity;

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.desilog.all;


--#------- Example0 ------------------------------------
architecture rtl of Example0 is

	----- internal regs/wires/etc --------
	signal dg_c_doAdd: std_ulogic;
	signal dg_c_xx: u8;
	signal dg_c_yy: u8;
	signal dg_c_zz: u8;
	signal dg_o_zz: u8;
	signal dg_c_and_result_reg: u8;
	signal dg_o_and_result_reg: u8;
	signal dg_w_xor_result_wire: u8;
	signal dg_l_or_result_latch: u8;
begin

	dg_comb_proc1: process (all)
	begin
		dg_l_or_result_latch <= dg_l_or_result_latch; -- latch preload
		dg_l_or_result_latch <= (xx or yy);
		if (dg_o_and_result_reg(4) = '1') then
			dg_l_or_result_latch <= xx;
		end if;
		if (dg_boolToBit(dg_o_zz(2 downto 0) = "101") = '1') then
			dg_l_or_result_latch <=  (not yy);
		end if;
	end process;

	myProcess: process (all)
	begin
		dg_c_zz <= dg_o_zz; -- reg preload
		dg_c_and_result_reg <= dg_o_and_result_reg; -- reg preload
		dg_w_xor_result_wire <= X"00"; -- wire pre-zero-init
		dg_c_and_result_reg <= (xx and yy);
		dg_w_xor_result_wire <= (xx xor yy);
		if (doAdd = '1') then
			dg_c_zz <= (xx + yy);
		else
			dg_c_zz <= (xx - yy);
		end if;
	end process;

	----[ sync clock pump for clk ]------
	process begin
		wait until rising_edge(clk_clk);
		dg_o_zz <= dg_c_zz;
		dg_o_and_result_reg <= dg_c_and_result_reg;
		if clk_reset_n = '0' then
			dg_o_and_result_reg <= X"55";
		end if;
	end process;

	------[ output registers/wires/latches ] --------------
	zz <= dg_o_zz;
	and_result_reg <= dg_o_and_result_reg;
	xor_result_wire <= dg_w_xor_result_wire;
	or_result_latch <= dg_l_or_result_latch;
end;



