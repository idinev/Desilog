-----------------------------------------------------------
--------- AUTOGENERATED FILE, DO NOT EDIT -----------------
-----------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.desilog.all;

use work.mypack.all;
use work.myentities.all;

--#------- tute2 ------------------------------------
architecture rtl of tute2 is
	type myArr16_u4 is array(0 to 15) of u4;
	type LOC_FSM is (
		 LOC_FSM_state1,
		 LOC_FSM_state2,
		 LOC_FSM_idle);

	signal nextData: u8;	-- reg
	signal fsm: MyEnum;	-- reg

	----- internal regs/wires/etc --------
	signal dg_c_memctl: MEM_CTL;
	signal dg_c_memres: MEM_RES;
	signal dg_o_memres: MEM_RES;
	signal dg_w_resXorAnd: u8;
	signal dg_c_nextData: u8;
	signal dg_c_fsm: MyEnum;
begin

	main: process (all)
	begin
		dg_c_memres <= dg_o_memres; -- reg preload
		dg_w_resXorAnd <= X"00"; -- wire pre-zero-init
		dg_c_nextData <= nextData; -- reg preload
		dg_c_memres.valid <= '0';
		dg_c_memres.busy <= '0';
		if (memctl.act = '1') then
			if (memctl.write = '1') then
				dg_c_nextData <= memctl.wdata;
			else
				dg_c_memres.rdata <= nextData;
				dg_c_memres.valid <= '1';
				dg_c_nextData <= nextData + X"01";
			end if;
		end if;
		dg_w_resXorAnd <= DoXorAnd(memctl.wdata, nextData, '1');
	end process;

	----[ sync clock pump for clk ]------
	process begin
		wait until rising_edge(clk_clk);
		dg_o_memres <= dg_c_memres;
		nextData <= dg_c_nextData;
		fsm <= dg_c_fsm;
		if clk_reset_n = '0' then
			nextData <= X"22";
			fsm <= MyEnum_one;
		end if;
	end process;

	------[ output registers/wires/latches ] --------------
	memres <= dg_o_memres;
	resXorAnd <= dg_w_resXorAnd;
end;



